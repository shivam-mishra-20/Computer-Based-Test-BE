import mongoose, { Document, Schema, Types } from 'mongoose';

export interface IPaperQuestionSolution {
  // Rich solution text or steps generated by AI
  solutionText: string;
}

export interface IPaperSectionSolutions {
  title: string;
  solutions: IPaperQuestionSolution[]; // aligned by question index in the corresponding section
}

export interface IPaper extends Document {
  owner: Types.ObjectId; // teacher/admin who generated
  examTitle: string;
  subject?: string;
  totalMarks?: number;
  generalInstructions: string[];
  // Original generated paper JSON
  sections: Array<{
    title: string;
    instructions?: string;
    marksPerQuestion?: number;
    questions: Array<{
      text: string;
      type: string;
      options?: Array<{ text: string; isCorrect?: boolean }>;
      correctAnswerText?: string;
      integerAnswer?: number;
      assertion?: string;
      reason?: string;
      assertionIsTrue?: boolean;
      reasonIsTrue?: boolean;
      reasonExplainsAssertion?: boolean;
      explanation?: string;
      diagramUrl?: string;
    }>;
  }>;
  // Optional AI-generated solutions set (parallel to sections/questions)
  solutions?: {
    generatedAt: Date;
    sections: IPaperSectionSolutions[];
  };
  meta?: Record<string, any>;
}

const paperSchema = new Schema<IPaper>(
  {
    owner: { type: Schema.Types.ObjectId, ref: 'User', required: true, index: true },
    examTitle: { type: String, required: true },
    subject: { type: String },
    totalMarks: { type: Number },
    generalInstructions: { type: [String], default: [] },
    sections: { type: Schema.Types.Mixed, required: true },
    solutions: {
      generatedAt: { type: Date },
      sections: { type: Schema.Types.Mixed },
    },
    meta: { type: Schema.Types.Mixed },
  },
  { timestamps: true }
);

paperSchema.index({ owner: 1, createdAt: -1 });

export default mongoose.model<IPaper>('Paper', paperSchema);
